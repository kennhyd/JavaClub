class Myclass {
public static void main(String args[]) {

   System.out.println("Welcome to java Programming");
}
}



import java.util.*;

public class InputExample {
public static void main(String args[]) {

   scanner scan=new Scanner(System.in);

   System.out.println(*Enter a number: +$1) ; 
   int s1=scan.nextInt();

   System.out.println(*Enter a number: +$2) ; 
   int s2=scan.nextInt();

   int result = s1+s2;

   System.out.println("Result : " +result : " ) ; 

}
}



import java.util.*;

public class InputExample {

    public static void main(String args[]) {

        Scanner scan=new Scanner(System.in);

        System.out.println( "Enter a number: " ) ;  /* +s1, +s2 */
        int s1=scan.nextInt();

        System.out.println( "Enter a 2nd number: " ) ;
        int s2=scan.nextInt();

        int result = s1+s2;

        System.out.println("Result : " +result ) ;

    }
}


import java.util.*;

public class InputExample1 {

    public static void main(String args[]) {

        Scanner scan=new Scanner(System.in);

        System.out.println( "Enter a number: " ) ;  /* +s1, +s2 */
        int s1=scan.nextInt();

        System.out.println( "Enter a 2nd number: " ) ;
        int s2=scan.nextInt();

        int result = s1*s2;    // different operation

        System.out.println("Result : " +result ) ;

    }
}





--------------------------------------------------------------------------------

import java.io;

public class BufferedReaderExample {

  public static void main(String args[]) throws Exception {

     BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
     String s1 = bf.readLine();

     System.out.println("Your String :"+s1);

 }
}


import java.util.*;

public class ConditionChecking {

 public static void main(String args[]) {
 
 Scanner scan=new Scanner(System.in);
 System.out.println("Enter a year to check leapyear ");

 int year = sc.nextInt();

 if (year%4 == 0) {
    System.out.println("Leap Year");

 } else if (year%4 != 0){
    System.out.println("Not a Leap Year");

 } else (year%4 > 0){
    System.out.println("Invalid entry");
    }
  }
}


----------------------------------------------------------

import java.util;
public class SwitchExample {

  public static void main(String [] args) {
  char grade = 'A';

// ask users to enter a Grade
        System.out.println("Choose a grade: A, B, C, D or F");
        grade = input.next().charAt(0);

  switch (grade) {
     case 'A':
      System.out.println("Very Good");
     case 'B':
      System.out.println("Very Good");
     case 'C':
      System.out.println("Average");
     case 'D':
      System.out.println("Low");
      default: System.out.println("Fail");

    }
  }
 }
  


import java.util;
public class LoopExample {

      public static void main(String args[]) {

        for (int i=1; i<=20; i++) {
      }
    }
  }



import java.util.Scanner;

public class RectangleArea {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the length of the rectangle: ");
        double length = scanner.nextDouble();

        System.out.println("Enter the width of the rectangle: ");
        double width = scanner.nextDouble();

        double area = length * width;

        System.out.println("The area of the rectangle is: " + area);
    }
}






     
 Enter First Number:
 Enter 2nd Number:

 1. Add
 2. Subtract
 3. Multiply
 4. Division
 5. Remainder

 Enter Choice:

 Do you want to Continue:

 Restart otherwise exit in case of 'n'



1. Abstraction      hide implementation details

2. Encapsulation    binds data and methods together, "

3. Inheritance      public class B extends A 

                    public class B extends A {
                    // Class B code here
                    }
                    public static void main (String[] arg) {
                    B b =new B();
                    b.msg();
4. Polymorphism     many forms, 

Create a class that is a "shape class"  (triangle, rectangle, etc)
 Extend parent class to 2nd class, program to calculate area of shape.


import java.awt.*;
import java.awt.geom.*;

public class ShapeExample {

    public static void main(String[] args) {

        Shape circle = new Ellipse2D.Double(10, 10, 100, 100);

        // Check if a point is inside the circle
        if (circle.contains(50, 50)) {
            System.out.println("Point is inside the circle");
        }

        // Get the bounding box of the circle
        Rectangle2D bounds = circle.getBounds2D();
        System.out.println("Bounding box: " + bounds);
    }
}


Inheritance:

import java.util.*;

class Vehicle {
  protected String brand = "Ford";        // Vehicle attribute
  public void honk() {                    // Vehicle method
    System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {
  private String modelName = "Mustang";    // Car attribute
  public static void main(String[] args) {

    // Create a myCar object
    Car myCar = new Car();

    // Call the honk() method (from the Vehicle class) on the myCar object
    myCar.honk();

    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class
    System.out.println(myCar.brand + " " + myCar.modelName);
  }
}



import java.util.*;

public class Test {
    int rectangle = 0;
    int triangle = 1

    }
class Shape extends Test {

    public static void main(String[] args) {

    Shape myShape = new Shape();

        Scanner scan = new Scanner(System.in);
        System.out.println("Enter Geometric Shape,0=rectangle,1=triangle:");

        String gshape = scan.nextInt();

        if (gshape == myShape.rectangle) { }

            System.out.println("Enter the length of the rectangle, inches: ");
            double length = scanner.nextDouble();

            System.out.println("Enter the width of the rectangle, inches: ");
            double width = scanner.nextDouble();

            double area = length * width;

            System.out.println("The area of the rectangle is: " + area + " inches.");
        }


    } else if(gshape == myShape.rectangle) {  }


        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the base of the triangle, inches:");
        double base = scanner.nextDouble();

        System.out.println("Enter the height of the triangle, inches:");
        double height = scanner.nextDouble();

        double area = (base * height) / 2;
        System.out.println("The area of the triangle is: " + area);
    }
}


         else {
            System.out.println("Invalid entry");
        }
    }


-----------------------------------------------------------------------------------------------------------------------
/* public static void main (String[] args) {} 

   javac Welcome.java   to compile
   java Welcome.java
   
   :\Users\Ken\Desktop\html\Java Code>dir
 Volume in drive C has no label.
 Volume Serial Number is 4A8A-BCFE

 Directory of c:\Users\Ken\Desktop\html\Java Code

09/13/2024  01:52 PM    <DIR>          .
09/13/2024  01:46 PM    <DIR>          ..
09/13/2024  01:48 PM                67 java_test.java
09/13/2024  01:56 PM               435 Welcome.class
09/13/2024  01:58 PM               124 Welcome.java
               3 File(s)            626 bytes
               2 Dir(s)  538,443,886,592 bytes free

c:\Users\Ken\Desktop\html\Java Code>  */
/*
Data Types
----------

Primitive   							Non Primative
int			integer					String, Array, 	
boolean
float    decimal
long     more 
byte
double   more characters than float
long     more characters than int
short
*/


A class is a user-defined blueprint. 


State
Behavior
identity
Method



Polymorphism   Overloading  Overriding


public class Sum{

public int sum(int x, int y);
{
 return (x + u;
}

public int sum (int x, int y, int z);

public int sum(int x, int y, int z)



Constructors in Java?

In Java, Constructor is a block of codes similar to the method.  It is called when an instance of the class
is created.  At the time of calling the constructor, memory for the object is allocated in the memory.  It
is a special type of method that is used to initialize the object.  

=========================================================================================================================


JAVA OPERATORS

int x = 100 + 50;

int sum1 = 100 + 50;        // 150 (100 + 50)
int sum2 = sum1 + 250;      // 400 (150 + 250)
int sum3 = sum2 + sum2;     // 800 (400 + 400)


Arithmetic Operators
--------------------

Arithmetic operators are used to perform common mathematical operations.

Operator	Name	Description	Example	Try it
+	Addition	Adds together two values	x + y	
-	Subtraction	Subtracts one value from another	x - y	
*	Multiplication	Multiplies two values	x * y	
/	Division	Divides one value by another	x / y	
%	Modulus	Returns the division remainder	x % y	
++	Increment	Increases the value of a variable by 1	++x	
--	Decrement	Decreases the value of a variable by 1	--x


Java Assignment Operators
-------------------------

Assignment operators are used to assign values to variables.

In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:

Example
int x = 10;

The addition assignment operator (+=) adds a value to a variable:

Example
int x = 10;
x += 5;


A list of all assignment operators:

Operator	Example	Same As	Try it
=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3



Java Comparison Operators
-------------------------

Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.

The return value of a comparison is either true or false. These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter.

In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:

Example
int x = 5;
int y = 3;
System.out.println(x > y); // returns true, because 5 is higher than 3


Operator	Name	Example	Try it
==	Equal to	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to  x >= y	
<=	Less than or equal to	x <= y


Java Logical Operators
You can also test for true or false values with logical operators.

Logical operators are used to determine the logic between variables or values:

Operator	Name	Description	Example	Try it
&& 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10	
|| 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4	
!	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)



ARRAYS in Java

In Java, all arrays are dynamically allocated.
Arrays may be stored in contiguous memory allocated [consecutive memory locations]
Since arrays are objects in Java, we can find their length using the object property length.
A java array variable can be declared like other variables with [] after the data type.


var-name = new type[size];
int[]intArray = new int[20];
int[]intArray = new int[]{1,2,3,4,5,6,7,8,9,10}


public class ArrayExample {
  int[] arr;
  arr= new int[6];

arr[0]=0;
arr[1]=0;
arr[2]=0;
arr[3]=0;
arr[4]=0;
arr[5]=0;

for(int i=0; i< arr.length; i++) {
   systm.out.println(arr[i]);
}


String[] n = {""};
for (String i : cars) {
  System.out.println(i);




Program to reverse a number

435478 

Enter a number 435478 ==> reverse number is : 874534


// Java program to reverse a number 
import java.io.*; 
  
// Driver Class 
class GFG { 
    // Function to reverse the number 
    static int reverse(int n) 
    { 
        // reversed number 
        int rev = 0; 
        // remainder 
        int rem; 
  
        while (n > 0) { 
            rem = n % 10; 
            rev = (rev * 10) + rem; 
            n = n / 10; 
        } 
  
        return rev; 
    } 
  
    // Driver Function 
    public static void main(String[] args) 
    { 
        int n = 4526; 
  
        System.out.print("Reversed Number is "
                         + reverse(n)); 
    } 
}

=======================================================================================================================




import java.util.*;

public class switchExample {

    public static void main(String[] args) {

char grade = 'A';

// create an object of Scanner class
Scanner input = new Scanner(System.in);

// ask users to enter a Grade
        System.out.println("Choose a grade: A, B, C, D or F");
grade = input.next().charAt(0);

        switch (grade) {
            case 'A':
                System.out.println("Very Good");
                break;
            case 'B':
                System.out.println("Very Good");
                break;
            case 'C':
                System.out.println("Average");
                break;
            case 'D':
                System.out.println("Low");
                break;
            default: System.out.println("Fail");
            break;

        }
    }
}




public class OverloadExample {

    public int add(int x, int y) {
        return x+y;
    }
}

public int add(int x, int y, int z) {
        return x+y+z;
}

public float add(String firstName, String lastName) {
    return firstName + lastName;

}

public static void main(String arg[]) {

    OverloadExample ol = nw OverloadingExampe();
    System.outprintln(ol.add( 20, 40));
    System.outprintln(ol.add( 20, 40, 50));
    System.outprintln(ol.add( "Preeti"," Yadav" ));
}
}


public class Parent {

    public void test() {
        System.out.println("I am inside parent class");
    }
}


public class Child entends Parent{
       System.out.println("I am inside child class");
}

public static void main(String arg[]) {
  Parent p1 =new Parent();
  p1.test();
  Parent p2 =new Child();
  p2.test();
}

-----------------------------------------------------------------------------------------------------

Package in Java mechanism to encapsulate a group of classes, sub packages and interfaces.



// Abstract class Sunstar 

abstract class AbstractExample {
abstract void printInfo();
}

// Employee class that extends the abstract class AbstractExample

// 
class Employee extends AbstractExample {

 void printInfo() {

 String name = "Avinash";
 int age = 21;
 float salary = 222.2F:

 System.out.println(name);
 System.out.println(age);
 System.out.println(salary);

 class Base {
    public static void main(String args[]) {
       AbstractExample s = new Employee();
       s.printInfo();   // call printinfo method
 }
}




ShapeTest.java

public class ShapeTest {


    public void types() {
        System.out.println("shape");

    }

}


ShapeTest.class

public class ShapeTest {
    public ShapeTest() {
    }

    public void types() {
        System.out.println("shape");
    }
}


Calc.java

class Calc extends ShapeTest {
    private String shapeArea = "Shape Area";

    Calc() {
    }

    public static void main(String[] args) {
        ShapeTest myCalc = new Calc();
        ((ShapeTest)myCalc).types();
    }
}


Calc.class

class Calc extends ShapeTest {
    private String shapeArea = "Shape Area";

    Calc() {
    }

    public static void main(String[] args) {
        ShapeTest myCalc = new Calc();
        ((ShapeTest)myCalc).types();
    }
}

